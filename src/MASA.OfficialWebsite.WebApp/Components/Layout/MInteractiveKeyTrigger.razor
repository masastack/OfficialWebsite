@namespace Masa.Blazor
@using Microsoft.AspNetCore.Components.Rendering
@inject NavigationManager NavigationManager

@if (WithWrapper)
{
    <div class="m-interactive-trigger @Class"
         style="@Style">
        @RenderContent
    </div>
}
else
{
    @RenderContent
}

@code {

    private void RenderContent(RenderTreeBuilder __builder)
    {
        @foreach (var option in QueryOptions)
        {
            var value = option == QueryValue ? null : option;

            <a style="display: contents"
               href="@NavigationManager.GetUriWithQueryParameter(QueryName, value)">
                @ChildContent?.Invoke(option)
            </a>
        }

        @if (QueryValue != null)
        {
            <DynamicComponent Type="@InteractiveComponentType"
                              Parameters="@InteractiveParameters" />
        }
    }

    [Parameter] public string? Class { get; set; }

    [Parameter] public string? Style { get; set; }

    [Parameter] [EditorRequired] public string QueryName { get; set; } = null!;

    [Parameter] [EditorRequired] public IEnumerable<string> QueryOptions { get; set; } = null!;

    [Parameter] public string? QueryValue { get; set; }

    [Parameter] [EditorRequired] public Type InteractiveComponentType { get; set; } = null!;

    [Parameter] public IDictionary<string, object>? InteractiveParameters { get; set; }

    [Parameter] public RenderFragment<string>? ChildContent { get; set; }

    [Parameter] public bool WithWrapper { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        QueryName.ThrowIfNull(nameof(MInteractiveKeyTrigger));
        QueryOptions.ThrowIfNull(nameof(MInteractiveKeyTrigger));
        InteractiveComponentType.ThrowIfNull(nameof(MInteractiveKeyTrigger));
    }

}
