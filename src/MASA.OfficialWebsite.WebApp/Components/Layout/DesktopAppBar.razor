@inject NavigationManager NavigationManager

<AppBar Class="hidden-sm-and-down" BarHeight="100" LogoHeight="42">
    <SectionOutlet SectionName="document" />

    <MInteractiveTriggers Class="nav-menus"
                          WithPopup
                          Left="NavMenuLeft"
                          PopupClass="menu-list"
                          TValue="string"
                          QueryName="nav-menu"
                          QueryValue="@QueryValue"
                          InteractiveValue="navMenuInteractiveValues"
                          InteractiveComponentType="typeof(NavMenu)"
                          InteractiveComponentParameters="ProductNavMenuParameters">
        <MButton Id="@($"{context}-nav-menu")"
                 Class="mr-9 h8 emphasis2--text"
                 Text
                 Color="@IsActive(context)">
            @(context switch
            {
                "product" => "产品",
                "study"   => "学习",
                _         => context
            })
        </MButton>
    </MInteractiveTriggers>

    <MButton Text Class="h8 emphasis2--text" Href="/aboutus"
             Color="@IsActive("aboutus")">
        关于我们
    </MButton>
</AppBar>

@code {

    [Parameter] public List<NavItem> ProductNavItems { get; set; } = new();

    [Parameter] public List<NavItem> StudyNavItems { get; set; } = new();

    [SupplyParameterFromQuery(Name = "nav-menu")]
    private string? QueryValue { get; set; }

    private string? _absolutePath;

    private static string[] navMenuInteractiveValues = { "product", "study" };

    private bool IsProductNavMenu => QueryValue?.Equals("product", StringComparison.OrdinalIgnoreCase) is true;

    private Dictionary<string, object> ProductNavMenuParameters => new()
    {
        { nameof(NavMenu.Items), IsProductNavMenu ? ProductNavItems : StudyNavItems },
    };

    private int NavMenuLeft => IsProductNavMenu ? -388 : -286;

    protected override void OnInitialized()
    {
        _absolutePath = NavigationManager.GetAbsolutePath();
    }

    private string? IsActive(string context)
    {
        var trimAbsolutePath = _absolutePath?.Trim('/');

        if ((context is "product" && trimAbsolutePath is "stack")
        || (context is "study" && trimAbsolutePath is "learningpath" or "activity")
        || (context is "aboutus" && trimAbsolutePath is "aboutus"))
        {
            return "primary";
        }

        return null;
    }
}
