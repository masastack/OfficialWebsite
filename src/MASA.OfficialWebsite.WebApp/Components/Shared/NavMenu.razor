@using BlazorComponent.Web
@rendermode InteractiveServer
@implements IOutsideClickJsCallback
@implements IAsyncDisposable
@inject OutsideClickJSModule OutsideClickJSModule
@inject NavigationManager Navigation

<MList Class="menu-list"
       Style="@Style"
       Elevation="0"
       Subheader
       TwoLine
       Routable
       @ref="_list">
    @foreach (var item in Items)
    {
        @if (item.IsSubheader)
        {
            <MSubheader Style="height: auto"
                        Class="subtitle3 emphasis--text">
                @item.Subheader
            </MSubheader>
        }
        else
        {
            <MListItem Href="@item.Href" ActiveClass="primary--text" Disabled="@item.Disabled" Class="home-menu-hover">
                @if (item.Image is not null)
                {
                    <MListItemAvatar Tile Size="40" Class="mt-0 mb-0">
                        <MImage Src="@item.Image" alt="@item.Title"
                                Height="@item.Size" Width="@item.Size"
                                Contain Eager />
                    </MListItemAvatar>
                }
                <MListItemContent>
                    <MListItemTitle Class="h8 regular--text">
                        <div style="@item.Style"> @item.Title</div>
                    </MListItemTitle>
                    <MListItemSubtitle Class="body2 regular3--text">@item.Subtitle</MListItemSubtitle>
                </MListItemContent>
            </MListItem>
        }
    }
</MList>

@code {

    [Parameter, EditorRequired]
    public IList<NavItem> Items { get; set; } = new List<NavItem>();

    [Parameter] public string? Style { get; set; }

    [Parameter] public string QueryName { get; set; }

    [Parameter] public IEnumerable<string> ActivatorSelectors { get; set; }

    private MList _list = null!;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        Items ??= new List<NavItem>();
        ActivatorSelectors ??= Enumerable.Empty<string>();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var selectors = ActivatorSelectors.ToList();
            selectors.Add(_list.Ref.GetSelector());
            await OutsideClickJSModule.InitializeAsync(this, selectors.ToArray());
        }
    }

    public async Task HandleOnOutsideClickAsync()
    {
        await Task.Delay(100);
        Navigation.NavigateWithQueryParameter(QueryName, (bool?)null);
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        await OutsideClickJSModule.Dispose();
    }

}
